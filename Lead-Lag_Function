use database AR_DATABASE;

create table AR_Product_Sale
(
Product_ID int,
Sale_Date date,
Daily_Sales number (5,0)
);

SELECT*,
LEAD (DAILY_SALES,1) OVER (PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS NEXT_DAY_SALE,
LEAD (DAILY_SALES,2) OVER (PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS NEXT2DAY_SALE,
LEAD (DAILY_SALES,3) OVER (PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS NEXT3DAY_SALE,
FROM AR_PRODUCT_SALE;

SELECT*,
LEAD (DAILY_SALES,1) OVER (PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS NEXT_DAY_SALE,
LEAD (DAILY_SALES,2) OVER (PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS NEXT2DAY_SALE,
LEAD (DAILY_SALES,3) OVER (PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS NEXT3DAY_SALE,
(NEXT_DAY_SALE-DAILY_SALES)/ DAILY_SALES*100 AS NEXT_DAY_PER_CHANGE,
(NEXT2DAY_SALE-NEXT_DAY_SALE)/NEXT_DAY_SALE *100 AS NEXT2DAY_PER_CHANGE,
(NEXT2DAY_SALE-NEXT3DAY_SALE)/ NEXT2DAY_SALE*100 AS NEXT3DAY_PER_CHANGE
FROM AR_PRODUCT_SALE;

--QUALIFY COMMAND IS USED TO CREATE FILTER LIKE HAVING CLUASE--
SELECT*,
LEAD (DAILY_SALES,1) OVER (PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS NEXT_DAY_SALE,
LEAD (DAILY_SALES,2) OVER (PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS NEXT2DAY_SALE,
LEAD (DAILY_SALES,3) OVER (PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS NEXT3DAY_SALE,
(NEXT_DAY_SALE-DAILY_SALES)/ DAILY_SALES*100 AS NEXT_DAY_PER_CHANGE,
(NEXT2DAY_SALE-NEXT_DAY_SALE)/NEXT_DAY_SALE *100 AS NEXT2DAY_PER_CHANGE,
(NEXT2DAY_SALE-NEXT3DAY_SALE)/ NEXT2DAY_SALE*100 AS NEXT3DAY_PER_CHANGE
FROM AR_PRODUCT_SALE
QUALIFY NEXT3DAY_SALE IS NOT NULL;

SELECT*,
LAG (DAILY_SALES,1) OVER (PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS PREVIOUS_DAY_SALE,
LAG (DAILY_SALES,2) OVER (PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS DAY_PREV_SALE,
LAG (DAILY_SALES,3) OVER (PARTITION BY PRODUCT_ID ORDER BY SALE_DATE) AS DAY_PREV_SALE
FROM AR_PRODUCT_SALE;
